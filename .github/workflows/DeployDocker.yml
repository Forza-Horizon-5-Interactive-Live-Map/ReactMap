name: Docker Image CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  dockerTag: latest

jobs:

  setup:
    name: setup the agent
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        
      - name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
              
      - name: Setup dockerTag to Staging
        if: github.ref_name == 'develop'
        run: |
          echo "dockerTag=dev" >> $GITHUB_ENV

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8.7
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

  build_vite:
      name: Build the vite app
      runs-on: ubuntu-latest
      needs: setup
  
      steps:
        - name: Build project
          run: npm run build
  
        - name: Upload production-ready build files
          uses: actions/upload-artifact@v3
          with:
            name: production-files
            path: ./dist
            
  build_docker:
      name: Build & push the docker container
      runs-on: ubuntu-latest
      needs: build_vite
  
      steps:
        - name: Download artifact
          uses: actions/download-artifact@v3
          with:
            name: production-files
            path: ./dist
            
        - name: Build and push DockerImage
          run: docker build --platform linux/arm64  --file ./Dockerfile --tag dercraker0/forza5_live_map/react-map:dev --push .

        
  deploy:
    name: Building and deploy Image gametrip-api
    runs-on: ubuntu-latest
    needs: build_docker
    steps:
      - name: PUT Request Action to update Stack - STAGING
        uses: fjogeleit/http-request-action@v1.13.0
        with:
          url: '${{ secrets.PORTAINER_UPDATE_STACK_REACT_MAP }}'
          method: 'PUT'
          timeout: 20000
          customHeaders: '${{ secrets.CUSTOM_HEADER }}'
          data: '${{ vars.PORTAINER_UPDATE_STACK_REACT_MAP}}'
